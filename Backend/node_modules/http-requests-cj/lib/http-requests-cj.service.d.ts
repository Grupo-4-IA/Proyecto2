import { HttpClient } from '@angular/common/http';
import * as i0 from "@angular/core";
export declare class HttpRequestsCJService {
    http: HttpClient;
    constructor(http: HttpClient);
    private makeParams;
    private makeHeaders;
    /**
     * Constructs a `GET` request that interprets the body as a JSON object and returns
     * the response body in a given type.
     *
     * @param url      The endpoint URL.
     * @param params   An HTTP request/response body that represents serialized parameters,it creates a `HttpParams` object.
     * @param headers  Represents the header configuration options for an HTTP request, it creates a `HttpHeader` object.
     *
     * @return A `Promise` of the `HttpResponse`, with a response body in the requested type.
     */
    get<T>(url: string, params?: Params[], headers?: Header[]): Promise<T>;
    /**
     * Constructs a `POST` request that interprets the body as a JSON object
     * and returns an observable of the response.
     *
     * @param url The endpoint URL.
     * @param body The content to replace with.
     * @param params   An HTTP request/response body that represents serialized parameters,it creates a `HttpParams` object.
     * @param headers  Represents the header configuration options for an HTTP request, it creates a `HttpHeader` object.
     *
     * @return  A `Promise` of the `HttpResponse` for the request, with a response body in the
     * requested type.
     */
    post<T>(url: string, body: any, params?: Params[], headers?: Header[]): Promise<T>;
    /**
     * Constructs a `DELETE` request that interprets the body as a JSON object and returns
     * the response in a given type.
     *
     * @param url     The endpoint URL.
     * @param params   An HTTP request/response body that represents serialized parameters,it creates a `HttpParams` object.
     * @param headers  Represents the header configuration options for an HTTP request, it creates a `HttpHeader` object.
     *
     * @return A `Promise` of the `HttpResponse`, with response body in the requested type.
     */
    delete<T>(url: string, params?: Params[], headers?: Header[]): Promise<T>;
    /**
     * Constructs a `PUT` request that interprets the body as an instance of the requested type
     * and returns an observable of the requested type.
     *
     * @param url The endpoint URL.
     * @param body The resources to add/update.
     * @param params   An HTTP request/response body that represents serialized parameters,it creates a `HttpParams` object.
     * @param headers  Represents the header configuration options for an HTTP request, it creates a `HttpHeader` object.
     *
     * @return A `Promise` of the requested type.
     */
    put<T>(url: string, body: any, params?: Params[], headers?: Header[]): Promise<T>;
    static ɵfac: i0.ɵɵFactoryDeclaration<HttpRequestsCJService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<HttpRequestsCJService>;
}
export declare type Params = {
    name: string;
    value: string | number | boolean;
};
export declare type Header = {
    name: string;
    value: string | string[];
};
