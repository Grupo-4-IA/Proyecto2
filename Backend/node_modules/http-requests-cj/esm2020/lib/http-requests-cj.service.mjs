import { HttpHeaders, HttpParams } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { lastValueFrom } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class HttpRequestsCJService {
    constructor(http) {
        this.http = http;
    }
    makeParams(params) {
        let param = new HttpParams();
        for (let i = 0; params !== undefined && i < params.length; i++) {
            param = param.append(params[i].name, params[i].value);
        }
        return param;
    }
    makeHeaders(headers) {
        let header = new HttpHeaders();
        for (let i = 0; headers !== undefined && i < headers.length; i++) {
            header = header.append(headers[i].name, headers[i].value);
        }
        return header;
    }
    /**
     * Constructs a `GET` request that interprets the body as a JSON object and returns
     * the response body in a given type.
     *
     * @param url      The endpoint URL.
     * @param params   An HTTP request/response body that represents serialized parameters,it creates a `HttpParams` object.
     * @param headers  Represents the header configuration options for an HTTP request, it creates a `HttpHeader` object.
     *
     * @return A `Promise` of the `HttpResponse`, with a response body in the requested type.
     */
    async get(url, params, headers) {
        let param = this.makeParams(params);
        let header = this.makeHeaders(headers);
        return await lastValueFrom(this.http.get(url, { params: param, headers: header }));
    }
    /**
     * Constructs a `POST` request that interprets the body as a JSON object
     * and returns an observable of the response.
     *
     * @param url The endpoint URL.
     * @param body The content to replace with.
     * @param params   An HTTP request/response body that represents serialized parameters,it creates a `HttpParams` object.
     * @param headers  Represents the header configuration options for an HTTP request, it creates a `HttpHeader` object.
     *
     * @return  A `Promise` of the `HttpResponse` for the request, with a response body in the
     * requested type.
     */
    async post(url, body, params, headers) {
        let param = this.makeParams(params);
        let header = this.makeHeaders(headers);
        return await lastValueFrom(this.http.post(url, body, { params: param, headers: header }));
    }
    /**
     * Constructs a `DELETE` request that interprets the body as a JSON object and returns
     * the response in a given type.
     *
     * @param url     The endpoint URL.
     * @param params   An HTTP request/response body that represents serialized parameters,it creates a `HttpParams` object.
     * @param headers  Represents the header configuration options for an HTTP request, it creates a `HttpHeader` object.
     *
     * @return A `Promise` of the `HttpResponse`, with response body in the requested type.
     */
    async delete(url, params, headers) {
        let param = this.makeParams(params);
        let header = this.makeHeaders(headers);
        return await lastValueFrom(this.http.delete(url, { params: param, headers: header }));
    }
    /**
     * Constructs a `PUT` request that interprets the body as an instance of the requested type
     * and returns an observable of the requested type.
     *
     * @param url The endpoint URL.
     * @param body The resources to add/update.
     * @param params   An HTTP request/response body that represents serialized parameters,it creates a `HttpParams` object.
     * @param headers  Represents the header configuration options for an HTTP request, it creates a `HttpHeader` object.
     *
     * @return A `Promise` of the requested type.
     */
    async put(url, body, params, headers) {
        let param = this.makeParams(params);
        let header = this.makeHeaders(headers);
        return await lastValueFrom(this.http.put(url, body, { params: param, headers: header }));
    }
}
HttpRequestsCJService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: HttpRequestsCJService, deps: [{ token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });
HttpRequestsCJService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: HttpRequestsCJService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: HttpRequestsCJService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }]; } });
//# sourceMappingURL=data:application/json;base64,